函数：function（功能）
	创建函数：
		def 语句：
	调用函数；
		函数名（调用实参）
python 函数的参数传递
	传递方式：
		1.位置传参
			1.1 序列传参
		2.关键字传参
			2.1 字典关键字传参
位置传参
	实际参数（实参）的对应关系于形式参数（形参）的对应关系按位置来依次对应

	示例：
		def mymin（a,b,c）:
			pass
		mymin（1,2,3)
	说明：
		实参和形参通过位置进行的传递和匹配
		实参的个数必须于形参个数相同
	示例见：
		positional_give_args.py
# 此示例示意函数的位置传参
	def myfun1（a,b,c）:
		print('a绑定的是',a)
		print('b绑定的是',b)
		print('c绑定的是',c)
	myfun1（1,2,3)
序列传参：
	序列传参是指在函数调用过程中，用*将序列拆解后按位置进行传递的传承方式
	说明：
		序列传参时，序列的拆解的位置将于形式参数--对应
	*
关键字穿参：
	关键字传参是指传参时，按照形参的名称给形参赋值
	实际参数和形参按照名称进行匹配
	
	11 -> a  22 -> b   33 -> c 
	myfun1（a=11,c=33,b=22)
字典关键字传参
	是指实参为字典，将字典用**拆解后进行关键字传参的传参方式
	说明：
		字典的键名和形式名必须一致
		字典的键名必须为符合标识符命名规则的字符传
		字典的键名要在形参中存在
	d1 = {"c":33,"b":22,"a":11}
	myfun1(**d1)
函数的综合传参：
	参数的传参方式，在能确定形参唯一匹配到相应实参的情况下可以任意组合
	函数的位置传参要限于关键字传参
	示例：
		def myfun（a,b,c）:
			pass
		myfun1(100,*[200,300])
		myfun1(*[100,200],300)
		myfun1(*[100],200,*[200)
		myfun1(100,c=300,b=2)
		myfun1(100,**{'c':300},b=200)
		#以下是错误的传参方式
		myfun1(a= 100,b=200,300) #位置参数要放在关键字参数之前
		myfun1(100,**{"c":300},200)
函数的定义及函数的形参里列表-----
函数的缺省参数：
	语法：
		def 函数名（形式参数1=默认实参1，形参名2 = 默认实参2，.....）
			语句块
	示例：
		def info(name,age=1,address="不详"):
			print(name,age,address)
		
		info('我和你',30,'北京')
		info('sdf',20)
		info("sdfs")
	说明：	
		缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的左右
		数都必须右缺省参数
		2.缺省参数可以有0个或多个，甚至全部都有缺省参数
练习：
	写一个函数myadd，此函数可以计算俩个数，三个数及四个数的和
函数的形参的定义方式：
	位置形象
	星号元组形参
	命名关键字形参
	双星号字典形参
	
位置形参：
	语法：
		def  函数名（形参名1，形参名2 .. .）
			语句块
星号元组形参：
	语法；
		def 函数名（*元组形参名）：
			语句块	
	作用：
		收集多余的位置参数
	说明：
		元组形参名一般命名为'args'
练习：
	写一个函数：mysum可以传入任意个实参的数字，返回所有实参的和
	如：
		def mysum（*args）：
			...
		print(mysum(1,2,3,4)) 10
		print(mysum(100,200,300)) 600
命名关键字形参：
	语法：
		def 函数名（*,命名关键字形参1，命名关键字形参2，....）
			语句块
	或	
		def 函数名（*args，命名关键词形参1，命名关键字形参2，...）
			语句块
	作用：
		强制所有的参数都必须用关键字传参或字典关键字传参
	示例
		def func(a,b,*,c,d): #cd 强制c和d 必须是以关键字方式传参
			print(a,b,c,d)
双星号字典形参：
	语法：
		def 函数名(**字典形参名)：
			语句块
		作用：
			收集多余的关键字传参
		说明：
			字典形参名一般命名为'kwargs'
			一个函数内的字典形最多只能有一个
		def func(**kwargs):
			print("实参个数是：",len(kwargs))
			print("关键字参数是：",kwargs)
			
		func(a=1,b=2)  #kwargs {"a":1,"b":2}
说明：
	位置参数，缺省参数，*元祖参数，**字典形参可以混合使用
	函数参数自左至右的循序为：
		位置形参，*元祖形参，命名关键字形参，**字典形参
	如：
		def func(a,b,*args,c,b=20,**kwargs):
			pass
可以接收任意位置传参和关键字传参的函数：
	def fn(*args，**kwargs):
		pass
全局变量 和局部变量：
	局部变量 local variable
		定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
		局部变量只能在函数内部使用
		局部变量在函数调用时才能被创建，在函数调用之后会自动销毁
	全局变量
		定义在函数外部，模块内部的变量称为全局变量
		全局变量所有函数都可以直接访问(取值),但函数内部不能将变量赋值
	局部变量说明：
		在函数内部的赋值语句不会对全局变量造成影响
		局部变量只能在其被声明的函数内部访问，而全局变量可以在整个模块
		的范围内访问
globals函数 和 locals函数
	globals()   返回当前全局作用域内的变量的字典
	locals()   	返回当前局部作用域内的变量的字典
  
  1.写一个函数 isprime(x) 判断x是否是素数，如果是素数返回True，否则返回False
  def isprime(x):
    if x < 2:
        return False
    else:
        for i in range(2,x):
            if x % i ==0:
                return False
        else:
            return True
 2.写一个函数prime_m2n(m,n) 返回从m开始， 到n结束（不包含n）范围内的素数列表
	，打印这些数
	如：L = prime_m2n(10,20)
    print(L)  [11,13,17,19]
    def prime_m2n(m,n):
      l = []
      for i in range(m,n):
          if isprime(i):
              l.append(i)
      return l
  3.写一个函数primes(n) 返回指定范围内的n以内的素数列表
	并打印
  def primes(n):
    return prime_m2n(0,n)
   
 
