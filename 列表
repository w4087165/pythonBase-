列表：list
	问题：如何将计算机运算的数据临时存入一个地方，同时又方便，添加
	删除，修改等操作：
		容器！
	列表的定义：
		列表是一种容器：
		列表是可以被改变的序列
		列表是由一系列特定元素组成的，元素与元素之间可能没有任何
		的关联关系， 但他们之间有先后顺序关系
	创建空列表的字面值：
		l = []   #创建一个空列表
	创建非空列表的字面值：
		l = [2,3,5,4]
		l = [2,2,['s','q'],4]
	列表的构造函数list
	list（） 生成一个空的列表，等用于【】
	list（iterable） 用可迭代对象创建一个列表
	示例：
		L=list（）
		L = list（"hello"）
		L = list(range(10))
列表的运算：
	运算符：
		+ += * *=
	+ 用于拼接列表
	l = [1,2] + [3,4]+[5,6]
	+= 用于列表写在右侧列表拼接，并用变量绑定列表
	x = [1,2,3]
	x += [4,5,6]
	x += "abc"
	x += range(10,20,3)
	print(x)
	[1,2,3,4,5,6,"a","b","c",10,13,16,19]
	* 生成重复的列表
	x = [1,2]*3  #[1,2,1,2,1,2]
	*= 用远列表生成重复的列表，并绑定变量新列表：
	x = [1]
	x *= 4
	x = [1,1,1,1]
	
列表的比较运算：
	运算符：
	< <= > >= == != 
	说明：
		列表的比较规则写字符串的比较规则相同
		列表要求每个元素能依次进行比较，否则会出现类型错误
	示例：
		[1,2,3]<[1,3,2]  #True
		[1,2] <= [1,2,3]   #True
		[1,4] >= [1,2,3] #True
		[1,"two"] > ["two",1] #TypeError 类型错误
列表是可迭代对象：
	L = [1,3,5,7]
	for x in L:
		print(x)  #打印 1 3 5 7
列表的 in 和 not in 运算符：
	in 判断一个值是否存在与列表中，如果存在返回True，否则返回
	False   
	not in  相反
	示例：
	x = [1,'two',3,'四']
	3 in x   #True
	"3" in x   # False
	10 not in x # True
列表的索引操作：
	语法：
		列表[]
	用法：
		等同于字符串的索引
		索引分正向索引和反向索引，规则写字符串索引规则完全相同
	示例：
		l = [1,2,3,4]
		print(l[1])  #2
		print(l[-1])  #4
列表的索引赋值：
	列表是可变的容器，可以通过索引赋值来改变列表中的元素
	语法：
		列表[整数表达式] =  表达式
	示例：
		x = [1,2,3,4]
		x[2] = 3.1 #修改列表中第3个元素的值为3.1
列表的切片操作：
	slice
	s = 'abcde'
	s[1:4]  #bcd
	列表的切片取值返回一个列表，规则等同于字符串的切片取值规则
列表的切片赋值：
	作用：
		可以改变原列表的排列，可以插入和删除数据
		可以用切片改变列表对应的元素的值
	语法：
		列表[切片] = 可迭代对象
	说明：
		切片赋值的赋值运算的右侧必须是一个可迭代对象
	示例：
		l = [1,1.5,3,2.5]
		l[1,3] = [2]
		
切片的注意事项：
	对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供的数据
	元素的个数一定要等于切片切出的段数
	L = [1,2,3,4,5,6]
	L[::2] = "abc"   #对
	L[::2] = "abcd"  #错
del语句 用于删除列表中的元素
	del 列表[索引或者切片]
	示例：
	l = [1,2,3,3,45,5,4]
	del l[::2] l =[2,3,5]
	def l [0]  l = [3,5]
python3 常用与序列的函数：
	len(x) 返回序列的长度：
	max(x) 返回序列的最大值长度：
	min(x) 返回序列的最小值元素：
	sum(x) 返回序列中所有元素的和（元素必须是数值类型）
	any(x) 真值测试，如果序列中其中一个元素值为真值则返回True
	all(x) 真值测试，如果弃于列中左右元素都为真值才返回True

	示例：
	L = [8,3,6,2]
	print(len(L))  #4
	print(max(L))  #8
	print(min(L))  #2
	print(sum(L))  #19
	any(L)   True   只要列表中有一个元素的bool取值为Ture 结果为True
	all(L)	 True
