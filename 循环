while语句的注意事项：
	要控制循环真值表达式的值来防止死循环：
	要常用真值表达式内的循环变量来控制循环条件
	通常在循环的语句块内改变循环变量来控制循环次数和变量的走向
while 语句的嵌套：
	while 语句本身就是语句，和其他语句一样，可以嵌套
	到任何的复合语句中
	示意：
		while 真值表达式：
			..
			while 真值表达式：
			..
			else：
			..
		else:
		..
break 语句：
	问题：
		如果在循环中不在继续执行从循环
	作用：
		用于循环语句（while语句或for 语句）中，用来终止
		当前循环语句的执行
		语法：
			break
		说明：
			当break语句执行后，此循环语句break语句之后的语句不再执行
			break 语句通常和If语句组成使用
			break 语句终止循环时，循环语句的else子句的语句将不会被执行
			break 语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳
			出嵌套在外重的循环
			break 语句只能在循环语句（while或for语句）内部使用
死循环：
	死循环时值循环条件一直成立的循环
	死循环通常用break 语句来终止循环
	死循环的else字句永远不会执行
  
  
  
  
  
		for语句：
			作用：用来遍历可迭代对象的数据元素
			(可迭代对象是指能一次获取数据元素的对象)
		可迭代对象包括：
			字符串str
			列表 list
			元祖 tuple
			字典 dict
			集合 set
	for 变量列表 in 可迭代对象：
		语句块1
	else：
		语句块2
	说明：
		else 子句部分可以省略
		当在循环内用break 语句重视for循环语句是，else子句
		
	range函数：
		作用：
			用来创建一个生成一系列整数的可迭代对象（也叫整数序列生成器）
		格式：
			rang（stop） 用来生成0~stop 区间内的整数，知道stop为止（不
			包含stop）
			range（start，stop[,step]） 用来生成start~stop区间内的整数
			直到stop为止，每一个整数间隔step（不包含stop，且step看可以是负整数）
		参见
			help（range）
		说明：
			此整数队列生成器从start开始，到stop结束（不包含），以step为步长的整数
			range函数：调用的返回对象是可迭代对象
		示例：
			range（4）    #生成 0 1 2 3 
			range（3，6） #生成 3 4 5 
			range（0，10，2） #生成 0 2 4 6 8
			range（5，0，-2） #生成5 3 1
			range （4，0）  #无数
		for 语句的注意事项：
		for 语句中range的调用时先调用一次，之后不在调用
		for 语句中的变量可能不被常见的问题：
			for i in rang（4，0）
				print(x)
			else
				print(x)  # 报错
			print(x)    #x这个变量不存在
		for 语句的嵌套：
			示例：
				for i in '123':
					for y in 'abc':
						print(i+y)
continue 语句：
	问题：
		如果让程序不再向下执行，重新开始一次新的循环：
	作用:
		用于循环语句（for while语句）中，不再执行本次循环continue之后的语句
		重新开始一次新的循环：
	语法：
		continue
	说明：
		continue 语句只能用在循环体内部：
		在 while语句中执行continue语句，将会直接跳转到while语句的真值表达式
		处，重现判断循环条件
		for语句中，执行continue语句，将会从可迭代对象中取下一个
