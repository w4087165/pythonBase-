字典 dict
	什么是字典：
		字典是一种可变的容器，可以存储任意类型的数据
		字典中的每个数据都是用"键"(key) 进行索引,而不像序列（字符串等）可以用整数下标进行索引
		字典中的数据没有先后顺序关系，字典的存储是无序的，字典中的数据以键-值（key-value）,对的形式
		进行映射存储，字典的键不能重复，且只能用不可变类型作为字典的键
	字典的字面值的创建方法：
		字典的表示方法是｛｝ 括起来，以冒号（:） 分割键-值对，各键值对之间用逗号分割
	创建空字典
		d = {}
	创建非空的字典
		d = {'name':'小明','age':30}
	不可变类型：
		bool，int，float，complex，str，tuple，frozenset(固定集合)
		bytes(字节数组)
	可变数据类型：
		list，dict，set（集合），bytearray（字节数组）
	创建字典示例：
		d = {"a":100}
		d = {100:'一百'}
		d = {'a':tuple("abc")}
		d = {(1970,1,1):"计算机元年"}
字典的构造函数：
		dict()   创建一个空的字典，等用于｛｝
		dict(iterable)  用可迭代对象的数据创建一个字典 ，但可迭代对象长度不可超过2也不能为1，每一个值都可拆分为2个元素，前者作为键，后者作为值
		dict(**kwargs)  用关键字传参方式创建一个字典
		
	示例：
		d = dict()
		L = [(1,2),[2,3],'AB']
		d = dict(L)  #d = {1:2,3:4,'A':'B'}
		d = dict(name = 'Tarena',age = 17)
字典的基本操作：
	字典的键索引：
		用[]运算符可以获取字典'键'所对应的'值'
	语法：
		v = 字典[键]
		d = {'name' : 'Tarena','age':17}
		print(d['name'],'的年龄是',d['age'],'岁')
	d = dict(name = 'Tarena',age = 17)
添加和修改字典的键值对：
	语法：
		字典[键] = 表达式
	说明：
		键不存在，创建键，并绑定键对应的值
		键存在，修改键绑定的值
	示例：
		d = {}
		d['name'] = 'Tarena'   创建键'name'同时关联'Tarena'
		d['age'] = 18		  #创建键值对'age':16
		d['age'] = 16         #修改键所对应的值
del 语句用来删除字典的键值对
	语法：
		del 字典[键]
	示例：
		d = {'name':'Tarena','age':17}
		del d['name']
		del d['age']
字典的成员资格判断 in 和 not in 运算符
	in 用来判断一个键是否存在字典中，如果存在则返回True，否则返回False
	not in 的返回值于in 相反
	示例：
		d = {'name':'Tarena','Age':16}
		'name' in d  #True
		16 in d    # False	in运算符值判断键，不判断值
		'name' not in d   #False
		100 not in d   #True
